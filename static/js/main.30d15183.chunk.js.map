{"version":3,"sources":["ToDoForm/ToDoForm.js","App.js","serviceWorker.js","index.js"],"names":["ToDoForm","numberClass","useState","toDo","setToDo","toDoList","setToDoList","deleteToDo","i","toDoListCopy","Object","assign","splice","className","type","onChange","e","currentTarget","value","id","placeholder","onClick","color","Math","floor","length","map","item","index","key","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAuEeA,MAnEf,WAAqB,IAAD,OAIZC,EAAc,CAAC,uBAAwB,uBAAwB,uBAAwB,wBAJ3E,EAMMC,mBAJP,IAFC,mBAMXC,EANW,KAMLC,EANK,OAOcF,mBAJX,IAHH,mBAOXG,EAPW,KAODC,EAPC,KA6BZC,EAAa,SAACC,GAClB,IAAMC,EAAeC,OAAOC,OAAO,GAAIN,GACvCI,EAAaG,OAAOJ,EAAG,GACvBF,EAAYG,IAGd,OACE,6BACE,wBAAII,UAAU,OAAd,SACA,yBAAKA,UAAU,kEACb,yBAAKA,UAAU,eACb,2BAAOC,KAAK,SAASC,SA/BH,SAACC,GACzBZ,EAAQY,EAAEC,cAAcC,QA8BgCC,GAAG,UAAUD,MAAOf,EAAMiB,YAAY,qBAAqBP,UAAU,iBACvH,yBAAKA,UAAU,sBACb,4BAAQA,UAAU,kBAAkBQ,QAzB1B,WAfH,IAgBXlB,IAGJG,EAAY,GAAD,mBAAMD,GAAN,CAAgB,CACzBa,MAAOf,EACPmB,MATKrB,EAAYsB,KAAKC,MAAMnB,EAASoB,OAASxB,EAAYwB,aAY5DrB,EAAQ,MAgB0DU,KAAK,UAA/D,aAIN,yBAAKD,UAAU,gEAEbR,EAASqB,KAAI,SAACC,EAAMC,GAAP,OACX,yBAAKC,IAAKD,GACR,6BACA,yBAAKf,UAAW,+CAAkDc,EAAKL,OACnE,yBAAKT,UAAU,yBACb,0BAAMA,UAAU,8BAA8Be,EAAQ,EAAtD,KAA2DD,EAAKT,QAElE,yBAAKL,UAAU,OACb,2BAAOC,KAAK,SAASI,MAAM,IAAIL,UAAU,qCAAqCQ,QAASd,EAAWuB,KAAK,EAAMF,cC/ChHG,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCIcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.30d15183.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './ToDoForm.css';\r\n\r\nfunction ToDoForm() {\r\n\r\n  const toDoInit = \"\"\r\n  const toDoListInit = []\r\n  const numberClass = [\"todo-wrapper-color-a\", \"todo-wrapper-color-b\", \"todo-wrapper-color-c\", \"todo-wrapper-color-d\" ];\r\n\r\n  const [toDo, setToDo] = useState(toDoInit)\r\n  const [toDoList, setToDoList] = useState(toDoListInit)\r\n\r\n  const handleInputChange = (e) => {\r\n    setToDo(e.currentTarget.value)\r\n  }\r\n\r\n  const getClassName = () => {\r\n    return numberClass[Math.floor(toDoList.length % numberClass.length)];\r\n  }\r\n\r\n  const addToDoItem = () => {\r\n    if (toDo == toDoInit)\r\n      return;\r\n\r\n    setToDoList([... toDoList, {\r\n      value: toDo,\r\n      color: getClassName()\r\n    }]);\r\n\r\n    setToDo(\"\")\r\n  }\r\n\r\n  const deleteToDo = (i) => {\r\n    const toDoListCopy = Object.assign([], toDoList);\r\n    toDoListCopy.splice(i, 1)\r\n    setToDoList(toDoListCopy)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"App\">Todos</h2>\r\n      <div className=\"offset-lg-4 col-lg-4 offset-md-4 col-md-4 offset-sm-3 col-sm-6\">\r\n        <div className=\"input-group\">\r\n          <input type='search' onChange={handleInputChange} id=\"txtToDo\" value={toDo} placeholder='Enter todo here...' className='form-control' />\r\n          <div className=\"input-group-append\">\r\n            <button className=\"btn btn-success\" onClick={addToDoItem} type=\"button\">Submit</button>  \r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"offset-md-4 col-md-4 offset-sm-3 col-sm-6 text-align-default\">\r\n      {\r\n        toDoList.map((item, index) => (\r\n          <div key={index}>\r\n            <br />\r\n            <div className={\"d-flex justify-content-between todo-wrapper \" + (item.color)}>\r\n                <div className=\"p-2 align-self-center\">\r\n                  <span className=\"pull-left font-weight-bold\">{index + 1}) {item.value}</span>\r\n                </div>\r\n                <div className=\"p-2\">\r\n                  <input type=\"button\" value=\"x\" className=\"btn font-weight-bolder text-danger\" onClick={deleteToDo.bind(this, index)} />\r\n                </div>\r\n              </div>\r\n          </div>\r\n        ))\r\n      }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoForm;\r\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ToDoForm from './ToDoForm/ToDoForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}